public List<Integer> postorderTraversal(TreeNode root) {
		List<Integer> out = new ArrayList<Integer>();
		if(root==null)
			return out;
		TreeNode pre=null;
		Stack<TreeNode> s = new Stack();      
		while(root!=null || !s.empty()){
			if(root!=null){				
				s.push(root);
				root = root.left;
			}
			else{
				root = s.peek();
				if(root.right==null || root.right==pre){
				    out.add(root.val);
				    s.pop();
				    pre=root;
				    root = null;
				}
				else
				    root = root.right;
			}
		}
		return out;
	}


    void inorderIterative(Node *root)
{
	// create an empty stack
	stack<Node*> stack;

	// start from root node (set current node to root node)
	Node *curr = root;

	// if current node is null and stack is also empty, we're done
	while (!stack.empty() || curr != nullptr)
	{
		// if current node is not null, push it to the stack (defer it)
		// and move to its left child
		if (curr != nullptr)
		{
			stack.push(curr);
			curr = curr->left;
		}
		else
		{
			// else if current node is null, we pop an element from stack,
			// print it and finally set current node to its right child
			curr = stack.top();
			stack.pop();
			cout << curr->data << " ";

			curr = curr->right;
		}
	}
}